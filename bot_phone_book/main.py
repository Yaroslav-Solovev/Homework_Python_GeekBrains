import telebot
from telebot import types
import json

API_TOKEN='–í–∞—à TOKEN'
bot = telebot.TeleBot(API_TOKEN)

print("Bot is start")

def save():
    with open("book.json","w",encoding="utf-8") as fh:
        fh.write(json.dumps(phone_book,ensure_ascii=False))
    print("–§–∞–π–ª book.json –æ–±–Ω–æ–≤–ª–µ–Ω.")

def load():
    global phone_book
    with open("book.json","r",encoding="utf-8") as fh:
        phone_book=json.load(fh)
    print("–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

def search_contact(phone_num: int):
    global phone_book
    with open("book.json","r",encoding="utf-8") as fh:
        for key,value in phone_book.items():
            for k in value:
                if k==phone_num:
                    return key

@bot.message_handler(commands=['start'])
def startMessage(message):
    load()
    key = {}
    keyboard_1 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    key[0] = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã")
    key[1] = types.KeyboardButton("–ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç")
    key[2] = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
    key[3] = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
    keyboard_1.row(key[0], key[1])
    keyboard_1.row(key[2], key[3])

    name = message.from_user.first_name
    bot.send_message(message.chat.id,f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø Te–ª–µ—Ñ–æ–Ω–Ω—ã–π –±–æ—Ç, —É –º–µ–Ω—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ —Ç–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã. –ß–µ–º —Ç–µ–±–µ –ø–æ–º–æ—á—å?", parse_mode='html', reply_markup=keyboard_1)

@bot.message_handler(func=lambda message: True)
def menu(message):
    if message.chat.type == 'private':
        if message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã":
            for key in phone_book: 
                bot.send_message(message.chat.id, f"{key}: {str(phone_book[key]).replace('[', '').replace(']', '')}")
        elif message.text == "–ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç":
            markup_1 = types.InlineKeyboardMarkup(row_width=1)
            but1 = types.InlineKeyboardButton("–ù–∞–π—Ç–∏ –ø–æ —Ñ–∞–º–∏–ª–∏–∏", callback_data='text1')
            but2 = types.InlineKeyboardButton("–ù–∞–π—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data='text2')
            markup_1.add(but1,but2)
            bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏, –∫–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º –∏—Å–∫–∞—Ç—å:", reply_markup=markup_1)
        elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç":
            markup_2 = types.InlineKeyboardMarkup(row_width=1)
            but1 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='new')
            markup_2.add(but1)
            bot.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞:", reply_markup=markup_2)
        elif message.text == "–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç":
            markup_3 = types.InlineKeyboardMarkup(row_width=1)
            but1 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞", callback_data='del')
            but2 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞", callback_data='del_num')
            markup_3.add(but1,but2)
            bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:", reply_markup=markup_3)
        
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
            if call.data == 'text1':
                msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:")
                bot.register_next_step_handler(msg, show_name)
            elif call.data == 'text2':
                msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
                bot.register_next_step_handler(msg, show_number)
            elif call.data == 'new':
                msg = bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!")
                bot.register_next_step_handler(msg, add_new_contact)
            elif call.data == 'del':
                msg = bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–∞:")
                bot.register_next_step_handler(msg, del_contact)
            elif call.data == 'del_num':
                msg = bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞:")
                bot.register_next_step_handler(msg, del_num_contact)

def show_name(message):
    global phone_book
    quest = message.text
    bot.send_message(message.chat.id, f'{quest}: {phone_book.get(quest)}')
    if phone_book.get(quest)==None:
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ—Ç –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ!')

def show_number(message):
    quest = int(message.text)
    key = search_contact(quest)
    bot.send_message(message.chat.id, f'{key}: {quest}')
    if key==None:
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ!')

def add_new_contact(message):
    global phone_book
    quest = message.text.split()
    if quest == [] or len(quest) < 2:
        bot.send_message(message.chat.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
    else:
        if len(quest) > 2:
            phone_book[quest[0]] = []
            for i in range(len(quest)):
                if i>0:
                    phone_book[quest[0]].append(int(quest[i]))
            save()
            bot.send_message(message.chat.id, '–ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—É—é –∫–Ω–∏–≥—É!')

def del_contact(message):
    global phone_book
    quest = message.text
    del phone_book[quest]
    save()
    bot.send_message(message.chat.id, '–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!')

def del_num_contact(message):
    global phone_book
    quest = int(message.text)
    for key, value in phone_book.items():
        for k in value:
            if k==quest:
                phone_book[key].remove(k)
    save()
    bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–¥–∞–ª—ë–Ω!')
    
bot.polling()

























# @bot.message_handler(commands=['start'])
# def start_message(message):
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     btn1 = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
#     btn2 = types.KeyboardButton("–ü–æ–∏—Å–∫")
#     btn3 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
#     btn4 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
#     btn5 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
#     markup.add(btn1, btn2, btn3, btn4, btn5)
#     if message.text == "/start":
#         load()
#         bot.send_message(message.chat.id, 
#         "–¢–µ–ª–µ–±–æ—Ç –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç, {0.first_name}! –¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!)".format(message.from_user, bot.get_me()), 
#         parse_mode='html', reply_markup=markup)


# @bot.message_handler(content_types=['text'])
# def func(message):
#     if(message.text == "–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"):
#         for i in range(len(phone_book)):
#             item[i] = types.InlineKeyboardButton(phone_book[i], callback_data=str(i))
#             print(item[i])
#             print()
#         bot.send_message(message.chat.id, f'{phone_book}')
#     # elif(message.text == "–ü–æ–∏—Å–∫"):
#     #     bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é")
#     #     for i in range(len(phone_book)):
#     #         for j in range(len(phone_book[i])):
#     #             if phone_book[i][j] == text:

#     #         item[i] = types.InlineKeyboardButton(phone_book[i], callback_data=str(i))
#     #         print(item[i])
#     #         print()
#     #     bot.send_message(message.chat.id, f'{phone_book}')
    
#     elif(message.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç"):
#         bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ–≤–æ–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        
#         bot.send_message(message.chat.id, "–£ –º–µ–Ω—è –Ω–µ—Ç –∏–º–µ–Ω–∏..")
    
#     elif message.text == "–ß—Ç–æ —è –º–æ–≥—É?":
#         bot.send_message(message.chat.id, text="–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å —á–∏—Ç–∞—Ç–µ–ª—è–º–∏")
    
#     elif (message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
#         markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#         button1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
#         button2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
#         markup.add(button1, button2)
#         bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
#     else:
#         bot.send_message(message.chat.id, text="–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª..")


# # @bot.message_handler(commands=['start'])
# # def start_message(message):
# #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
# #     item[0] = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.")
# #     item[1] = types.KeyboardButton("–ü–æ–∏—Å–∫.")
# #     item[2] = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç.")
# #     item[3] = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç.")
# #     item[4] = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç.")
# #     markup.add(item[0])
# #     markup.add(item[1])
# #     markup.add(item[2])
# #     markup.add(item[3])
# #     markup.add(item[4])
# #     if message.text == "/start":
# #         load()
# #         bot.send_message(message.chat.id, 
# #         "–¢–µ–ª–µ–±–æ—Ç –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç, {0.first_name}! –¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!)".format(message.from_user, bot.get_me()), 
# #         parse_mode='html', reply_markup=markup)




# # # @bot.message_handler(content_types=["text"])
# # # def any_msg(message):
# # #     keyboard = types.InlineKeyboardMarkup()
# # #     callback_button = types.InlineKeyboardButton(text="–ù–∞–∂–º–∏ –º–µ–Ω—è", callback_data="test")
# # #     keyboard.add(callback_button)
# # #     bot.send_message(message.chat.id, "–Ø ‚Äì —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞", reply_markup=keyboard)


# @bot.message_handler(content_types=['text'])
# def mess(message):
#     if message.chat.type == 'private':
#         if message.text == "–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞.":
#             global gameIsStart
#             gameIsStart = True
#         else:
#             bot.send_message(message.chat.id, "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–∏—Ö —Å–ª–æ–≤.")
#     if gameIsStart == True:
#         item = {}
#         global markup
#         markup = types.InlineKeyboardMarkup()
#         i = 0
#         for i in range(len(phone_book)):
#             item[i] = types.InlineKeyboardButton(phone_book[i], callback_data=str(i))
#             print(item[i])
#             print()
#         bot.send_message(message.chat.id, f'{phone_book}')


# @bot.message_handler(commands=["–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤."])
# def show_all(message):
#     bot.send_message(message.chat.id,"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
#     bot.send_message(message.chat.id, f'{phone_book}')
#     print(phone_book)

# # @bot.message_handler(commands=['create'])
# # def create(message):
# #     global phone_book
# #     quest = message.text.split()[1:]
# #     print(quest)
# #     if quest == [] or len(quest) < 2:
# #         bot.send_message(message.chat.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
# #     else:
# #         if len(quest) > 2:
# #             while len(quest) > 2:
# #                 quest[-2] = quest[-2] + ', ' + quest[-1]
# #                 quest.pop()
# #         phone_book[quest[0]] = quest[1]
# #         save()
# #         bot.send_message(message.chat.id,"–ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω.")

# # @bot.message_handler(commands=['del'])
# # def create(message):
# #     global phone_book
# #     quest = message.text.split()[1:]
# #     del phone_book[quest[0]]
# #     bot.send_message(message.chat.id, '–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.')
# #     save()    

# # @bot.message_handler(commands=['show'])
# # def create(message):
# #     global phone_book
# #     quest = message.text.split()[1:]
# #     bot.send_message(message.chat.id, f'{quest[0]}: {phone_book.get(quest[0])}')

# # @bot.message_handler(commands=['help'])
# # def create(message):
# #     bot.send_message(message.chat.id, '/all - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π\n/create - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: –§–∞–º–∏–ª–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω(—ã)\n/del - —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ –§–∞–º–∏–ª–∏–∏\n/show - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ –§–∞–º–∏–ª–∏–∏')

# bot.polling()



# #https://stepik.org/course/63054?search=1409909486


# # phone_book = [{"Surname": "–ü–µ—Ç—Ä–æ–≤", "Name": "–ò–≤–∞–Ω", "Patronymic": "–ü–µ—Ç—Ä–æ–≤–∏—á", "Number": [435678, 456908], "City": "Moscow"}]
